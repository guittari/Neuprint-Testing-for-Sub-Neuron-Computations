{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /opt/anaconda3/lib/python3.7/site-packages (0.10.0)\n",
      "Requirement already satisfied: matplotlib>=2.1.2 in /opt/anaconda3/lib/python3.7/site-packages (from seaborn) (3.1.3)\n",
      "Requirement already satisfied: numpy>=1.13.3 in /opt/anaconda3/lib/python3.7/site-packages (from seaborn) (1.18.1)\n",
      "Requirement already satisfied: scipy>=1.0.1 in /opt/anaconda3/lib/python3.7/site-packages (from seaborn) (1.4.1)\n",
      "Requirement already satisfied: pandas>=0.22.0 in /opt/anaconda3/lib/python3.7/site-packages (from seaborn) (1.0.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib>=2.1.2->seaborn) (0.10.0)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib>=2.1.2->seaborn) (2.8.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib>=2.1.2->seaborn) (2.4.6)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib>=2.1.2->seaborn) (1.1.0)\n",
      "Requirement already satisfied: pytz>=2017.2 in /opt/anaconda3/lib/python3.7/site-packages (from pandas>=0.22.0->seaborn) (2019.3)\n",
      "Requirement already satisfied: six in /opt/anaconda3/lib/python3.7/site-packages (from cycler>=0.10->matplotlib>=2.1.2->seaborn) (1.15.0)\n",
      "Requirement already satisfied: setuptools in /opt/anaconda3/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib>=2.1.2->seaborn) (46.0.0.post20200309)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1001\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1001\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };var element = document.getElementById(\"1001\");\n",
       "  if (element == null) {\n",
       "    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n",
       "    return false;\n",
       "  }\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.4.0.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };var element = document.getElementById(\"1001\");\n  if (element == null) {\n    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n    return false;\n  }\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.4.0.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "import bokeh.palettes\n",
    "from bokeh.plotting import figure, show, output_notebook\n",
    "output_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: hvplot in /opt/anaconda3/lib/python3.7/site-packages (0.7.2)\n",
      "Requirement already satisfied: holoviews>=1.11.0 in /opt/anaconda3/lib/python3.7/site-packages (from hvplot) (1.14.4)\n",
      "Requirement already satisfied: pandas in /opt/anaconda3/lib/python3.7/site-packages (from hvplot) (1.0.1)\n",
      "Requirement already satisfied: bokeh>=1.0.0 in /opt/anaconda3/lib/python3.7/site-packages (from hvplot) (2.3.2)\n",
      "Requirement already satisfied: numpy>=1.15 in /opt/anaconda3/lib/python3.7/site-packages (from hvplot) (1.18.1)\n",
      "Requirement already satisfied: colorcet>=2 in /opt/anaconda3/lib/python3.7/site-packages (from hvplot) (2.0.6)\n",
      "Requirement already satisfied: param<2.0,>=1.9.3 in /opt/anaconda3/lib/python3.7/site-packages (from holoviews>=1.11.0->hvplot) (1.10.1)\n",
      "Requirement already satisfied: pyviz-comms>=0.7.4 in /opt/anaconda3/lib/python3.7/site-packages (from holoviews>=1.11.0->hvplot) (2.0.1)\n",
      "Requirement already satisfied: panel>=0.8.0 in /opt/anaconda3/lib/python3.7/site-packages (from holoviews>=1.11.0->hvplot) (0.11.3)\n",
      "Requirement already satisfied: pytz>=2017.2 in /opt/anaconda3/lib/python3.7/site-packages (from pandas->hvplot) (2019.3)\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /opt/anaconda3/lib/python3.7/site-packages (from pandas->hvplot) (2.8.1)\n",
      "Requirement already satisfied: PyYAML>=3.10 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh>=1.0.0->hvplot) (5.3)\n",
      "Requirement already satisfied: packaging>=16.8 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh>=1.0.0->hvplot) (20.1)\n",
      "Requirement already satisfied: pillow>=7.1.0 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh>=1.0.0->hvplot) (8.2.0)\n",
      "Requirement already satisfied: tornado>=5.1 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh>=1.0.0->hvplot) (6.0.3)\n",
      "Requirement already satisfied: Jinja2>=2.9 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh>=1.0.0->hvplot) (2.11.1)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh>=1.0.0->hvplot) (3.7.4.3)\n",
      "Requirement already satisfied: pyct>=0.4.4 in /opt/anaconda3/lib/python3.7/site-packages (from colorcet>=2->hvplot) (0.4.8)\n",
      "Requirement already satisfied: requests in /opt/anaconda3/lib/python3.7/site-packages (from panel>=0.8.0->holoviews>=1.11.0->hvplot) (2.22.0)\n",
      "Requirement already satisfied: markdown in /opt/anaconda3/lib/python3.7/site-packages (from panel>=0.8.0->holoviews>=1.11.0->hvplot) (3.3.4)\n",
      "Requirement already satisfied: tqdm in /opt/anaconda3/lib/python3.7/site-packages (from panel>=0.8.0->holoviews>=1.11.0->hvplot) (4.42.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/anaconda3/lib/python3.7/site-packages (from python-dateutil>=2.6.1->pandas->hvplot) (1.15.0)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in /opt/anaconda3/lib/python3.7/site-packages (from packaging>=16.8->bokeh>=1.0.0->hvplot) (2.4.6)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/anaconda3/lib/python3.7/site-packages (from Jinja2>=2.9->bokeh>=1.0.0->hvplot) (1.1.1)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel>=0.8.0->holoviews>=1.11.0->hvplot) (1.25.8)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel>=0.8.0->holoviews>=1.11.0->hvplot) (3.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel>=0.8.0->holoviews>=1.11.0->hvplot) (2019.11.28)\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel>=0.8.0->holoviews>=1.11.0->hvplot) (2.8)\n",
      "Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /opt/anaconda3/lib/python3.7/site-packages (from markdown->panel>=0.8.0->holoviews>=1.11.0->hvplot) (4.4.0)\n",
      "Requirement already satisfied: zipp>=0.5 in /opt/anaconda3/lib/python3.7/site-packages (from importlib-metadata; python_version < \"3.8\"->markdown->panel>=0.8.0->holoviews>=1.11.0->hvplot) (2.2.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install hvplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.4.0'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import bokeh\n",
    "bokeh.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in /opt/anaconda3/lib/python3.7/site-packages (3.1.3)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: numpy>=1.11 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib) (1.18.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib) (2.4.6)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib) (1.1.0)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/anaconda3/lib/python3.7/site-packages (from matplotlib) (2.8.1)\n",
      "Requirement already satisfied: six in /opt/anaconda3/lib/python3.7/site-packages (from cycler>=0.10->matplotlib) (1.15.0)\n",
      "Requirement already satisfied: setuptools in /opt/anaconda3/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib) (46.0.0.post20200309)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: panel in /opt/anaconda3/lib/python3.7/site-packages (0.11.3)\n",
      "Requirement already satisfied: tqdm in /opt/anaconda3/lib/python3.7/site-packages (from panel) (4.42.1)\n",
      "Requirement already satisfied: markdown in /opt/anaconda3/lib/python3.7/site-packages (from panel) (3.3.4)\n",
      "Requirement already satisfied: bokeh<2.4.0,>=2.3.0 in /opt/anaconda3/lib/python3.7/site-packages (from panel) (2.3.2)\n",
      "Requirement already satisfied: param>=1.10.0 in /opt/anaconda3/lib/python3.7/site-packages (from panel) (1.10.1)\n",
      "Requirement already satisfied: pyviz-comms>=0.7.4 in /opt/anaconda3/lib/python3.7/site-packages (from panel) (2.0.1)\n",
      "Requirement already satisfied: pyct>=0.4.4 in /opt/anaconda3/lib/python3.7/site-packages (from panel) (0.4.8)\n",
      "Requirement already satisfied: requests in /opt/anaconda3/lib/python3.7/site-packages (from panel) (2.22.0)\n",
      "Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /opt/anaconda3/lib/python3.7/site-packages (from markdown->panel) (4.4.0)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (3.7.4.3)\n",
      "Requirement already satisfied: Jinja2>=2.9 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (2.11.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (2.8.1)\n",
      "Requirement already satisfied: PyYAML>=3.10 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (5.3)\n",
      "Requirement already satisfied: tornado>=5.1 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (6.0.3)\n",
      "Requirement already satisfied: pillow>=7.1.0 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (8.2.0)\n",
      "Requirement already satisfied: packaging>=16.8 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (20.1)\n",
      "Requirement already satisfied: numpy>=1.11.3 in /opt/anaconda3/lib/python3.7/site-packages (from bokeh<2.4.0,>=2.3.0->panel) (1.18.1)\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel) (2.8)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel) (1.25.8)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel) (3.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/anaconda3/lib/python3.7/site-packages (from requests->panel) (2019.11.28)\n",
      "Requirement already satisfied: zipp>=0.5 in /opt/anaconda3/lib/python3.7/site-packages (from importlib-metadata; python_version < \"3.8\"->markdown->panel) (2.2.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/anaconda3/lib/python3.7/site-packages (from Jinja2>=2.9->bokeh<2.4.0,>=2.3.0->panel) (1.1.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/anaconda3/lib/python3.7/site-packages (from python-dateutil>=2.1->bokeh<2.4.0,>=2.3.0->panel) (1.15.0)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in /opt/anaconda3/lib/python3.7/site-packages (from packaging>=16.8->bokeh<2.4.0,>=2.3.0->panel) (2.4.6)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install panel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# from neuprint import Client\n",
    "\n",
    "TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5nMjgwMWFAc3R1ZGVudC5hbWVyaWNhbi5lZHUiLCJsZXZlbCI6Im5vYXV0aCIsImltYWdlLXVybCI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FBVFhBSndNLXljTFZ2bUQzM3NhYkdkZ09iR2xVenUxWWF1N1dsVDBBN3NxPXM5Ni1jP3N6PTUwP3N6PTUwIiwiZXhwIjoxODAyNzU1NTE4fQ.0qd0ZB4mGyBm-e2rSQLUGpGs8QMNOIi_yLYtPQUIYjw\" # <--- Paste your token here\n",
    "           # (or define NEUPRINT_APPLICATION CREDENTIALS in your environment)\n",
    "\n",
    "c = Client('neuprint.janelia.org', 'hemibrain:v1.2', TOKEN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.1.0'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from neuprint import Client\n",
    "c = Client('neuprint.janelia.org', dataset='hemibrain:v1.2.1', token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5nMjgwMWFAc3R1ZGVudC5hbWVyaWNhbi5lZHUiLCJsZXZlbCI6Im5vYXV0aCIsImltYWdlLXVybCI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FBVFhBSndNLXljTFZ2bUQzM3NhYkdkZ09iR2xVenUxWWF1N1dsVDBBN3NxPXM5Ni1jP3N6PTUwP3N6PTUwIiwiZXhwIjoxODAyNjQ3MDE2fQ.2geUI-Xs4NYsSnC3uGbrnN3MYva8zuxGTC3wWriCIWY')\n",
    "c.fetch_version()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hemibrain\n",
      " +-- AL(L)*\n",
      " +-- AL(R)*\n",
      " +-- AOT(R)\n",
      " +-- CX\n",
      " |   +-- AB(L)*\n",
      " |   +-- AB(R)*\n",
      " |   +-- EB*\n",
      " |   +-- FB*\n",
      " |   +-- NO*\n",
      " |   +-- PB*\n",
      " +-- GC\n",
      " +-- GF(R)\n",
      " +-- GNG*\n",
      " +-- INP\n",
      " |   +-- ATL(L)*\n",
      " |   +-- ATL(R)*\n",
      " |   +-- CRE(L)*\n",
      " |   +-- CRE(R)*\n",
      " |   +-- IB*\n",
      " |   +-- ICL(L)*\n",
      " |   +-- ICL(R)*\n",
      " |   +-- SCL(L)*\n",
      " |   +-- SCL(R)*\n",
      " +-- LH(R)*\n",
      " +-- LX(L)\n",
      " |   +-- BU(L)*\n",
      " |   +-- LAL(L)*\n",
      " +-- LX(R)\n",
      " |   +-- BU(R)*\n",
      " |   +-- LAL(R)*\n",
      " +-- MB(+ACA)(R)\n",
      " |   +-- MB(R)\n",
      " |   |   +-- CA(R)*\n",
      " |   |   +-- PED(R)*\n",
      " |   |   +-- a'L(R)*\n",
      " |   |   +-- aL(R)*\n",
      " |   |   +-- b'L(R)*\n",
      " |   |   +-- bL(R)*\n",
      " |   |   +-- gL(R)*\n",
      " |   +-- dACA(R)\n",
      " |   +-- lACA(R)\n",
      " |   +-- vACA(R)\n",
      " +-- MB(L)\n",
      " |   +-- CA(L)*\n",
      " |   +-- a'L(L)*\n",
      " |   +-- aL(L)*\n",
      " |   +-- b'L(L)*\n",
      " |   +-- bL(L)*\n",
      " |   +-- gL(L)*\n",
      " +-- OL(R)\n",
      " |   +-- AME(R)*\n",
      " |   +-- LO(R)*\n",
      " |   +-- LOP(R)*\n",
      " |   +-- ME(R)*\n",
      " +-- PENP\n",
      " |   +-- CAN(R)*\n",
      " |   +-- FLA(R)*\n",
      " |   +-- PRW*\n",
      " |   +-- SAD*\n",
      " +-- POC\n",
      " +-- SNP(L)\n",
      " |   +-- SIP(L)*\n",
      " |   +-- SMP(L)*\n",
      " +-- SNP(R)\n",
      " |   +-- SIP(R)*\n",
      " |   +-- SLP(R)*\n",
      " |   +-- SMP(R)*\n",
      " +-- VLNP(R)\n",
      " |   +-- AOTU(R)*\n",
      " |   +-- AVLP(R)*\n",
      " |   +-- PLP(R)*\n",
      " |   +-- PVLP(R)*\n",
      " |   +-- WED(R)*\n",
      " +-- VMNP\n",
      " |   +-- EPA(L)*\n",
      " |   +-- EPA(R)*\n",
      " |   +-- GOR(L)*\n",
      " |   +-- GOR(R)*\n",
      " |   +-- IPS(R)*\n",
      " |   +-- SPS(L)*\n",
      " |   +-- SPS(R)*\n",
      " |   +-- VES(L)*\n",
      " |   +-- VES(R)*\n",
      " +-- mALT(L)\n",
      " +-- mALT(R)\n"
     ]
    }
   ],
   "source": [
    "from neuprint import fetch_roi_hierarchy\n",
    "\n",
    "# Show the ROI hierarchy, with primary ROIs marked with '*'\n",
    "print(fetch_roi_hierarchy(False, mark_primary=True, format='text'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuprint import NeuronCriteria as NC\n",
    "\n",
    "# Example: Select a specific body\n",
    "criteria = 387023620\n",
    "criteria = NC(bodyId=387023620)\n",
    "\n",
    "# Example: Select several bodies\n",
    "criteria = [387023620, 387364605, 416642425]\n",
    "criteria = NC(bodyId=[387023620, 387364605, 416642425])\n",
    "\n",
    "# Example: Select bodies by exact type\n",
    "criteria = 'PEN_b(PEN2)'\n",
    "criteria = NC(type='PENPEN_b(PEN2)')\n",
    "\n",
    "# Example: Select bodies by exact instance\n",
    "criteria = 'PEN(PB06)_b_L4'\n",
    "criteria = NC(type='PEN(PB06)_b_L4')\n",
    "\n",
    "# Example: Select bodies by type name pattern\n",
    "criteria = NC(type='PEN.*', regex=True)\n",
    "\n",
    "# Example: Select bodies by region (input or output)\n",
    "criteria = NC(rois=['PB', 'EB'])\n",
    "\n",
    "# Example: Select traced neurons which intersect the PB ROI with at least 100 inputs (PSDs).\n",
    "criteria = NC(inputRois=['PB'], min_roi_inputs=100, status='Traced', cropped=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuprint import fetch_neurons\n",
    "neuron_df, roi_counts_df = fetch_neurons(criteria)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bodyId</th>\n",
       "      <th>instance</th>\n",
       "      <th>type</th>\n",
       "      <th>pre</th>\n",
       "      <th>post</th>\n",
       "      <th>status</th>\n",
       "      <th>cropped</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>387023620</td>\n",
       "      <td>PEN_b(PB06b)_L4</td>\n",
       "      <td>PEN_b(PEN2)</td>\n",
       "      <td>343</td>\n",
       "      <td>1713</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>686693145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>387364605</td>\n",
       "      <td>EPG(PB08)_L3</td>\n",
       "      <td>EPG</td>\n",
       "      <td>645</td>\n",
       "      <td>4350</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>1469716322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>416642425</td>\n",
       "      <td>EPG(PB08)_R4</td>\n",
       "      <td>EPG</td>\n",
       "      <td>470</td>\n",
       "      <td>3834</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>1169220265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>417998204</td>\n",
       "      <td>PFNv(PB05)_R4_C7</td>\n",
       "      <td>PFNv</td>\n",
       "      <td>229</td>\n",
       "      <td>999</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>476702093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>419060083</td>\n",
       "      <td>PFGs(PB10)_L2_C2</td>\n",
       "      <td>PFGs</td>\n",
       "      <td>556</td>\n",
       "      <td>2395</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>1107227318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>5813080979</td>\n",
       "      <td>PEN_a(PB06a)_L5</td>\n",
       "      <td>PEN_a(PEN1)</td>\n",
       "      <td>544</td>\n",
       "      <td>1655</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>931602278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478</th>\n",
       "      <td>5813081494</td>\n",
       "      <td>PFR_b(PB11b)_R1_C8</td>\n",
       "      <td>PFR_b</td>\n",
       "      <td>118</td>\n",
       "      <td>1908</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>591660901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>5813081686</td>\n",
       "      <td>PFNa(PB03)_L8_C7</td>\n",
       "      <td>PFNa</td>\n",
       "      <td>121</td>\n",
       "      <td>510</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>284299919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>5813087532</td>\n",
       "      <td>IbSpsP(PB17)_R9</td>\n",
       "      <td>IbSpsP</td>\n",
       "      <td>108</td>\n",
       "      <td>445</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>261895522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>481</th>\n",
       "      <td>5813128308</td>\n",
       "      <td>PFNp_a(PB01a)_L7_C6</td>\n",
       "      <td>PFNp_a</td>\n",
       "      <td>71</td>\n",
       "      <td>310</td>\n",
       "      <td>Traced</td>\n",
       "      <td>False</td>\n",
       "      <td>187284000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>482 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         bodyId             instance         type  pre  post  status  cropped  \\\n",
       "0     387023620      PEN_b(PB06b)_L4  PEN_b(PEN2)  343  1713  Traced    False   \n",
       "1     387364605         EPG(PB08)_L3          EPG  645  4350  Traced    False   \n",
       "2     416642425         EPG(PB08)_R4          EPG  470  3834  Traced    False   \n",
       "3     417998204     PFNv(PB05)_R4_C7         PFNv  229   999  Traced    False   \n",
       "4     419060083     PFGs(PB10)_L2_C2         PFGs  556  2395  Traced    False   \n",
       "..          ...                  ...          ...  ...   ...     ...      ...   \n",
       "477  5813080979      PEN_a(PB06a)_L5  PEN_a(PEN1)  544  1655  Traced    False   \n",
       "478  5813081494   PFR_b(PB11b)_R1_C8        PFR_b  118  1908  Traced    False   \n",
       "479  5813081686     PFNa(PB03)_L8_C7         PFNa  121   510  Traced    False   \n",
       "480  5813087532      IbSpsP(PB17)_R9       IbSpsP  108   445  Traced    False   \n",
       "481  5813128308  PFNp_a(PB01a)_L7_C6       PFNp_a   71   310  Traced    False   \n",
       "\n",
       "           size  \n",
       "0     686693145  \n",
       "1    1469716322  \n",
       "2    1169220265  \n",
       "3     476702093  \n",
       "4    1107227318  \n",
       "..          ...  \n",
       "477   931602278  \n",
       "478   591660901  \n",
       "479   284299919  \n",
       "480   261895522  \n",
       "481   187284000  \n",
       "\n",
       "[482 rows x 8 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neuron_df[['bodyId', 'instance', 'type', 'pre', 'post', 'status', 'cropped', 'size']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bodyId</th>\n",
       "      <th>roi</th>\n",
       "      <th>pre</th>\n",
       "      <th>post</th>\n",
       "      <th>downstream</th>\n",
       "      <th>upstream</th>\n",
       "      <th>mito</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>387023620</td>\n",
       "      <td>CX</td>\n",
       "      <td>341</td>\n",
       "      <td>1703</td>\n",
       "      <td>1653</td>\n",
       "      <td>1703</td>\n",
       "      <td>142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>387023620</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "      <td>776</td>\n",
       "      <td>5</td>\n",
       "      <td>776</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>387023620</td>\n",
       "      <td>PB(L5)</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>387023620</td>\n",
       "      <td>PB(L4)</td>\n",
       "      <td>1</td>\n",
       "      <td>722</td>\n",
       "      <td>5</td>\n",
       "      <td>722</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>387023620</td>\n",
       "      <td>INP</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7353</th>\n",
       "      <td>5813128308</td>\n",
       "      <td>FB</td>\n",
       "      <td>42</td>\n",
       "      <td>33</td>\n",
       "      <td>234</td>\n",
       "      <td>33</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7354</th>\n",
       "      <td>5813128308</td>\n",
       "      <td>FBl1</td>\n",
       "      <td>42</td>\n",
       "      <td>33</td>\n",
       "      <td>234</td>\n",
       "      <td>33</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7355</th>\n",
       "      <td>5813128308</td>\n",
       "      <td>NO</td>\n",
       "      <td>27</td>\n",
       "      <td>107</td>\n",
       "      <td>133</td>\n",
       "      <td>107</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7356</th>\n",
       "      <td>5813128308</td>\n",
       "      <td>NO(R)</td>\n",
       "      <td>27</td>\n",
       "      <td>107</td>\n",
       "      <td>133</td>\n",
       "      <td>107</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7357</th>\n",
       "      <td>5813128308</td>\n",
       "      <td>NO3(R)</td>\n",
       "      <td>27</td>\n",
       "      <td>107</td>\n",
       "      <td>133</td>\n",
       "      <td>107</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7358 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          bodyId     roi  pre  post  downstream  upstream  mito\n",
       "0      387023620      CX  341  1703        1653      1703   142\n",
       "1      387023620      PB    1   776           5       776    49\n",
       "2      387023620  PB(L5)    0    33           0        33     0\n",
       "3      387023620  PB(L4)    1   722           5       722    48\n",
       "4      387023620     INP    0     5           0         5     0\n",
       "...          ...     ...  ...   ...         ...       ...   ...\n",
       "7353  5813128308      FB   42    33         234        33    11\n",
       "7354  5813128308    FBl1   42    33         234        33    11\n",
       "7355  5813128308      NO   27   107         133       107    11\n",
       "7356  5813128308   NO(R)   27   107         133       107    11\n",
       "7357  5813128308  NO3(R)   27   107         133       107    11\n",
       "\n",
       "[7358 rows x 7 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roi_counts_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuprint import fetch_adjacencies, NeuronCriteria as NC\n",
    "\n",
    "# Example: Fetch all downstream connections FROM a set of neurons\n",
    "neuron_df, conn_df = fetch_adjacencies([387023620, 387364605, 416642425], None)\n",
    "\n",
    "# Example: Fetch all upstream connections TO a set of neurons\n",
    "neuron_df, conn_df = fetch_adjacencies(None, [387023620, 387364605, 416642425])\n",
    "\n",
    "# Example: Fetch all direct connections between a set of upstream neurons and downstream neurons\n",
    "neuron_df, conn_df = fetch_adjacencies(NC(type='Delta.*', regex=True), NC(type='PEN.*', regex=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bodyId_pre</th>\n",
       "      <th>bodyId_post</th>\n",
       "      <th>roi</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>910783961</td>\n",
       "      <td>5813070465</td>\n",
       "      <td>PB</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>880880259</td>\n",
       "      <td>849421763</td>\n",
       "      <td>PB</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>319</th>\n",
       "      <td>911565419</td>\n",
       "      <td>5813070465</td>\n",
       "      <td>PB</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>910442723</td>\n",
       "      <td>849421763</td>\n",
       "      <td>PB</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>911129204</td>\n",
       "      <td>724280817</td>\n",
       "      <td>PB</td>\n",
       "      <td>127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>352</th>\n",
       "      <td>911578496</td>\n",
       "      <td>664645558</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>911578496</td>\n",
       "      <td>634608104</td>\n",
       "      <td>ATL(L)</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>349</th>\n",
       "      <td>911578496</td>\n",
       "      <td>509410587</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>348</th>\n",
       "      <td>911578496</td>\n",
       "      <td>387023620</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>656</th>\n",
       "      <td>5813061383</td>\n",
       "      <td>5813070465</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>653 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     bodyId_pre  bodyId_post     roi  weight\n",
       "179   910783961   5813070465      PB     184\n",
       "56    880880259    849421763      PB     141\n",
       "319   911565419   5813070465      PB     141\n",
       "92    910442723    849421763      PB     139\n",
       "216   911129204    724280817      PB     127\n",
       "..          ...          ...     ...     ...\n",
       "352   911578496    664645558      PB       1\n",
       "351   911578496    634608104  ATL(L)       1\n",
       "349   911578496    509410587      PB       1\n",
       "348   911578496    387023620      PB       1\n",
       "656  5813061383   5813070465      PB       1\n",
       "\n",
       "[653 rows x 4 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn_df.sort_values('weight', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bodyId_pre</th>\n",
       "      <th>bodyId_post</th>\n",
       "      <th>roi</th>\n",
       "      <th>weight</th>\n",
       "      <th>type_pre</th>\n",
       "      <th>instance_pre</th>\n",
       "      <th>type_post</th>\n",
       "      <th>instance_post</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>734581598</td>\n",
       "      <td>387023620</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L6R3_L</td>\n",
       "      <td>PEN_b(PEN2)</td>\n",
       "      <td>PEN_b(PB06b)_L4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>734581598</td>\n",
       "      <td>508793049</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L6R3_L</td>\n",
       "      <td>PEN_a(PEN1)</td>\n",
       "      <td>PEN_a(PB06a)_L7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>734581598</td>\n",
       "      <td>509410587</td>\n",
       "      <td>PB</td>\n",
       "      <td>3</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L6R3_L</td>\n",
       "      <td>PEN_a(PEN1)</td>\n",
       "      <td>PEN_a(PB06a)_R4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>734581598</td>\n",
       "      <td>569775058</td>\n",
       "      <td>PB</td>\n",
       "      <td>17</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L6R3_L</td>\n",
       "      <td>PEN_b(PEN2)</td>\n",
       "      <td>PEN_b(PB06b)_R4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>734581598</td>\n",
       "      <td>570461892</td>\n",
       "      <td>PB</td>\n",
       "      <td>21</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L6R3_L</td>\n",
       "      <td>PEN_a(PEN1)</td>\n",
       "      <td>PEN_a(PB06a)_R3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>648</th>\n",
       "      <td>5813061383</td>\n",
       "      <td>1508334312</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L1L9R8_R</td>\n",
       "      <td>PEN_a(PEN1)</td>\n",
       "      <td>PEN_a(PB06a)_L3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>649</th>\n",
       "      <td>5813061383</td>\n",
       "      <td>1600083889</td>\n",
       "      <td>PB</td>\n",
       "      <td>37</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L1L9R8_R</td>\n",
       "      <td>PEN_b(PEN2)</td>\n",
       "      <td>PEN_b(PB06b)_L9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>650</th>\n",
       "      <td>5813061383</td>\n",
       "      <td>1601771527</td>\n",
       "      <td>PB</td>\n",
       "      <td>4</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L1L9R8_R</td>\n",
       "      <td>PEN_b(PEN2)</td>\n",
       "      <td>PEN_b(PB06b)_R9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651</th>\n",
       "      <td>5813061383</td>\n",
       "      <td>5813047157</td>\n",
       "      <td>PB</td>\n",
       "      <td>12</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L1L9R8_R</td>\n",
       "      <td>PEN_b(PEN2)</td>\n",
       "      <td>PEN_b(PB06b)_L2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>652</th>\n",
       "      <td>5813061383</td>\n",
       "      <td>5813070465</td>\n",
       "      <td>PB</td>\n",
       "      <td>1</td>\n",
       "      <td>Delta7</td>\n",
       "      <td>Delta7(PB15)_L1L9R8_R</td>\n",
       "      <td>PEN_b(PEN2)</td>\n",
       "      <td>PEN_b(PB06b)_L3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>653 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     bodyId_pre  bodyId_post roi  weight type_pre           instance_pre  \\\n",
       "0     734581598    387023620  PB       1   Delta7    Delta7(PB15)_L6R3_L   \n",
       "1     734581598    508793049  PB       1   Delta7    Delta7(PB15)_L6R3_L   \n",
       "2     734581598    509410587  PB       3   Delta7    Delta7(PB15)_L6R3_L   \n",
       "3     734581598    569775058  PB      17   Delta7    Delta7(PB15)_L6R3_L   \n",
       "4     734581598    570461892  PB      21   Delta7    Delta7(PB15)_L6R3_L   \n",
       "..          ...          ...  ..     ...      ...                    ...   \n",
       "648  5813061383   1508334312  PB       1   Delta7  Delta7(PB15)_L1L9R8_R   \n",
       "649  5813061383   1600083889  PB      37   Delta7  Delta7(PB15)_L1L9R8_R   \n",
       "650  5813061383   1601771527  PB       4   Delta7  Delta7(PB15)_L1L9R8_R   \n",
       "651  5813061383   5813047157  PB      12   Delta7  Delta7(PB15)_L1L9R8_R   \n",
       "652  5813061383   5813070465  PB       1   Delta7  Delta7(PB15)_L1L9R8_R   \n",
       "\n",
       "       type_post    instance_post  \n",
       "0    PEN_b(PEN2)  PEN_b(PB06b)_L4  \n",
       "1    PEN_a(PEN1)  PEN_a(PB06a)_L7  \n",
       "2    PEN_a(PEN1)  PEN_a(PB06a)_R4  \n",
       "3    PEN_b(PEN2)  PEN_b(PB06b)_R4  \n",
       "4    PEN_a(PEN1)  PEN_a(PB06a)_R3  \n",
       "..           ...              ...  \n",
       "648  PEN_a(PEN1)  PEN_a(PB06a)_L3  \n",
       "649  PEN_b(PEN2)  PEN_b(PB06b)_L9  \n",
       "650  PEN_b(PEN2)  PEN_b(PB06b)_R9  \n",
       "651  PEN_b(PEN2)  PEN_b(PB06b)_L2  \n",
       "652  PEN_b(PEN2)  PEN_b(PB06b)_L3  \n",
       "\n",
       "[653 rows x 8 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from neuprint import merge_neuron_properties\n",
    "\n",
    "conn_df = merge_neuron_properties(neuron_df, conn_df, ['type', 'instance'])\n",
    "conn_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>bodyId_post</th>\n",
       "      <th>910447075</th>\n",
       "      <th>509410587</th>\n",
       "      <th>1002507131</th>\n",
       "      <th>5813056953</th>\n",
       "      <th>1127471692</th>\n",
       "      <th>1125964630</th>\n",
       "      <th>849482511</th>\n",
       "      <th>1508334312</th>\n",
       "      <th>664645558</th>\n",
       "      <th>847336755</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bodyId_pre</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>734581598</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911911193</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911911004</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911911699</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911919044</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911919917</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911906936</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911578496</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911578595</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911574261</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "bodyId_post  910447075   509410587   1002507131  5813056953  1127471692  \\\n",
       "bodyId_pre                                                                \n",
       "734581598             0           3           0           0           1   \n",
       "911911193             1           0           1           0          21   \n",
       "911911004             2           0           1           0           3   \n",
       "911911699             0           0          20           0           0   \n",
       "911919044             0           0           0           1           0   \n",
       "911919917             1           0          11           1           0   \n",
       "911906936             0           0           7           0           0   \n",
       "911578496             1           1          29           0           0   \n",
       "911578595             1           0           0           0          22   \n",
       "911574261             0           0           1           0           0   \n",
       "\n",
       "bodyId_post  1125964630  849482511   1508334312  664645558   847336755   \n",
       "bodyId_pre                                                               \n",
       "734581598             1           0           1          13           0  \n",
       "911911193             8           1           0           0           0  \n",
       "911911004            36           0           0           0           0  \n",
       "911911699             0           1          16           0           0  \n",
       "911919044             0           0           1           2           0  \n",
       "911919917            10           0           0           0           0  \n",
       "911906936             0           0          13           0          15  \n",
       "911578496             0           2           0           1           1  \n",
       "911578595             8           1           1           0           0  \n",
       "911574261            28           0           0           0           0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#connection matrix\n",
    "\n",
    "from neuprint.utils import connection_table_to_matrix\n",
    "\n",
    "matrix = connection_table_to_matrix(conn_df, 'bodyId', sort_by='type')\n",
    "matrix.iloc[:10, :10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'hvplot'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-17-85573c55cbef>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmatrix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhvplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mheight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m600\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m700\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxrotation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m60\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'hvplot'"
     ]
    }
   ],
   "source": [
    "matrix.hvplot.heatmap(height=600, width=700).opts(xrotation=60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
